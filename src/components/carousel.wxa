<script>
import {wxa, Wxapi} from '@wxa/core';

let rpxFactor; // px->rpx比率
let pxFactor; // rpx->px

@Wxapi
class Carousel {
    constructor() {}
    properties = {
        category: {
            value: 'smart',
            type: String,
        },
        duration: {
            value: 5000,
            type: Number,
        },
        autoplay: {
            value: true,
            type: Boolean,
        },
        paddingLeft: {
            value: 30,
            type: Number,
        },
        gap: {
            value: 20,
            type: Number,
        },
    }
    data = {
        outerPanel: '',
        diplayPanel: '',
        innerPanel: '',
    }
    relations = {
        './carousel-item': {
            type: 'child',
        },
    }
    methods = {
        play() {
            return setTimeout(() => {
                if (this.current+1 < this.items && !this.rightPlaying) {
                    // 左滑
                    // calc taranslatex
                    let x = this.preTranslateX - this.itemWidth - this.gap/2;
                    this.animate(this.rpx2Px(x));
                    this.preTranslateX = x;
                    this.current ++;
                    this.rightPlaying = this.current+1 >= this.items;
                } else {
                    // 右滑
                    let x = this.preTranslateX + this.itemWidth + this.gap/2;
                    this.animate(this.rpx2Px(x));
                    this.preTranslateX = x;
                    this.current --;
                    this.rightPlaying = this.current > 0;
                }
                // setTimeout(()=>this.setData({current: this.current}), 900);
                this.setData({current: this.current});
                this.timer = this.play();
            }, this.data.duration);
        },
        inital(opts) {
            let {len, item} = opts;
            
            if (item == null) return null;

            this.items = len;
            this.current = 0;
            this.itemWidth = this.px2Rpx(item.width);
            this.itemHeight = this.px2Rpx(item.height);
            this.preTranslateX = this.paddingLeft = this.data.category === 'smart' ? this.data.paddingLeft : 0;
            this.gap = this.data.category === 'smart' ? this.data.gap : 0;
            // 计算宽度
            let panelWidth = this.itemWidth * len + this.gap * len + this.paddingLeft;

            this.setData({
                outerPanel: `height: auto`,
                diplayPanel: `width: ${panelWidth}rpx`,
                dots: new Array(len),
                current: this.current,
            });

            this.timer = this.play();
        },
        px2Rpx(x) {
            return x * rpxFactor;
        },
        rpx2Px(x) {
            return x * pxFactor; 
        },
        animate(x) {
            this.animation.translateX(x).step();
            this.setData({
                playAnimation: this.animation.export(),
            });
        },
        animationend() {
            console.log('animationend');
        },
        animationstart() {
            console.log('animationstart');
        },
    }
    ready() {
        console.log(this);
        let res = this.getRelationNodes('./carousel-item');
        if (this.data.category === 'smart') {
            res.forEach((item)=>{
                item.setGap(`margin-right: ${this.data.gap}rpx`);
                item.setMode(this.data.category);
            });
        } else if (this.data.category === 'full') {
            res.forEach((item)=>{
                item.setMode(this.data.category);
            });
        }

        if (res[0] == null) {
            console.warn('请配合carousel-item组件使用');
            return void(0);
        };

        let q = res[0].createSelectorQuery();
        q.selectAll('.carousel-item').boundingClientRect();
        q.exec((ret)=>{
            if (ret[0] == null) return null;
            this.inital({len: res.length, item: ret[0][0]});
        });
    }
    created() {
        let systemInfo = this.wxapi.getSystemInfoSync();
        rpxFactor = 750/systemInfo.windowWidth; 
        pxFactor = systemInfo.windowWidth/750;
        this.windowWidth = this.px2Rpx(systemInfo.windowWidth);
        
        this.animation = this.wxapi.createAnimation({
            duration: 1000,
            timingFunction: 'ease-in-out',
        });
        console.log(this.animation);
    }
}

wxa.launchComponent(Carousel);
</script>
<template>
<view class="outer {{category}}" style="{{outerPanel}}">
    <view class="inner" style="{{diplayPanel}}" animation="{{playAnimation}}" bindanimationstart="animationstart" bindanimationend="animationend">
        <slot></slot>
    </view>
    <view class="dots" wx:if="{{category === 'smart'}}">
        <block wx:for="{{dots}}">
            <view class="dot-item {{current===index ? 'active' : ''}}"></view>
        </block>
    </view>
</view>
</template>
<style lang="scss">
.outer {
    width: 100%;
    height: 0;
    overflow: hidden;
    // box-sizing: border-box;

    .inner {
        .carousel-item {
            float: left;
        }

        &:after {
            content: '';
            display: block;
            clear: both;
        }
    }
}

.smart {

    .inner {
        transform: translateX(30rpx);
    }

    .dots {
        width: 100%;
        height: 52rpx;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;

        .dot-item {
            background: #d8d8d8;
            border-radius: calc(48rpx*2);
            width: 16rpx;
            height: 12rpx;
            margin-left: 12rpx;
            transition: width linear 1s;

            &.active {
                background:#ea5504;
                width: 24rpx;
                height: 12rpx;
            }
        }
    }
}

</style>
<config>
{
    "component": true
}
</config>
