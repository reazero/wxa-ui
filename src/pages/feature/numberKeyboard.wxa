<script>
import {wxa, Page} from '@wxa/core';

const maxMove = 30;
@Page 
class NumberKeyboard {
    constructor() {}
    data = {
        value: '',
    }
    onLoad() {
        this.ctx = wx.createCanvasContext('keyboard');
        this.systemInfo = this.wxapi.getSystemInfoSync();
        console.log(this);
    }
    onShow() {
        let {screenWidth, screenHeight} = this.systemInfo;
        this.ctx.fillStyle = '#f2f2f2';
        this.ctx.fillRect(0, 0, screenWidth, screenHeight);

        this.ctx.draw();

        let k = new Keyboard(this.ctx, screenWidth, this.rpx2px(700));
        this.k = k;
    }

    methods = {
        rpx2px(rpx) {
            return rpx * (this.systemInfo.screenWidth/750);
        },
        touchstart(e) {
            console.log(e);
            console.log(Date.now());
            this.$startChangedTouches = e.changedTouches[0];
            let {touches: [{x, y}]} = e;

            let sect = this.k.findSection(x, y);

            this.$secction = sect;

            if (sect) {
                this.$currentSection = this.$currentSection ? (this.$currentSection.push(sect), this.$currentSection) : [sect];
                this.k.pressDownArea(sect);
            }
        },
        touchend(e) {
            console.log(e);
            if ( 
                Math.abs(e.changedTouches[0].x -this.$startChangedTouches.x) < maxMove && Math.abs(e.changedTouches[0].y -this.$startChangedTouches.y) < maxMove
            ) {
                this.setData({
                    value: this.data.value+''+this.$secction.value,
                });
            }
            setTimeout(() => {
                this.$currentSection.forEach((obj)=>{
                    this.k.pressUpArea(obj);
                });
            }, 88);
        },
    }
}

class Keyboard {
    constructor(ctx, width, height, isDel=true) {
        this.ctx = ctx;
        this.width = width;
        this.height = height;
        this.perCol = 3;
        this.perRow = 4;
        this.gap = 10;
        this.perHeight = (height-(this.perRow+1)*this.gap) / this.perRow;
        this.perWidth = (width-(this.perCol+1)*this.gap) / this.perCol;
        this.fontSize = 32;

        this.normalBgColor = 'white';
        this.normalColor = 'black';

        this.pressBgColor = '#949ba7';
        this.pressColor = 'black';

        this.radius = 12;

        // number cooriginal
        this.numbersCoor = [];
        // section area
        this.sectionArea = [];

        // feature btn
        this.isDel = isDel;

        this.start();
    }

    start() {
        this.drawBoard().drawNumber().ctx.draw();
    }

    drawBoard() {
        this.ctx.fillStyle = 'white';
        for (let j=0; j < this.perCol; j ++) {
            for (let i=0; i < this.perRow; i ++) {
                let x = Math.round(j*(this.perWidth+this.gap)+this.gap);
                let y = Math.round(i*(this.perHeight+this.gap)+this.gap);

                this.sectionArea.push({
                    x,
                    y,
                    endX: this.perWidth + x,
                    endY: this.perHeight + y,
                    section: i * this.perCol+ j,
                });
                this.ctx.setShadow(0, 5, 10, 'rgba(0, 0, 0, 0.3)');
                this.fillRoundRect(
                    x, y, this.perWidth, this.perHeight, this.radius
                );
                this.ctx.setShadow(0, 0, 0, 'white');
                // this.ctx.fillRect(
                //     x, y,
                //     this.perWidth, 
                //     this.perHeight);
            }
        }
        return this;
    }

    drawNumber(numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) {
        this.numbers = numbers;

        this.ctx.fillStyle = 'black';
        console.log(this.perHeight);
        this.ctx.font = `${this.fontSize}px samsun`;
        numbers.forEach((num, index)=>{
            let row = ~~ (index/3);
            let col = index % 3;

            if (index===numbers.length-1) {
                col ++;
            }

            let metrics = this.ctx.measureText(String(num));
            console.log(metrics);

            let x = Math.round(col * (this.perWidth+this.gap)
                        +this.gap + this.perWidth/2 - metrics.width/2);
            let y = Math.round(row * (this.perHeight+this.gap)
                        +this.gap + this.perHeight/2 + this.fontSize/3);

            this.ctx.fillText(num, x, y);
            this.numbersCoor.push({x, y, value: num, section: (row*this.perCol+col)});
        });

        return this;
    }

    drawFeatureBtn() {
        
    }

    findSection(x, y) {
        let ret = this.sectionArea.find((area)=>{
            return !!(
                area.x <= x &&
                area.y <= y &&
                area.endX >= x &&
                area.endY >= y 
            );
        });

        if (ret) {
            return this.numbersCoor.filter((num)=>num.section===ret.section)[0];
        } else {
            return ret;
        }
    }

    pressDownArea(obj) {
        console.log(Date.now());
        let {value, section, x, y} = obj;
        let area = this.sectionArea.filter((area)=>area.section===section)[0];

        // this.ctx.clearRect(area.x, area.y, area.endX - area.x, area.endY - area.y);
        this.ctx.fillStyle = this.pressBgColor;
        this.fillRoundRect(area.x, area.y, area.endX - area.x, area.endY - area.y, this.radius);
        this.ctx.fillStyle = this.pressColor;
        this.ctx.fillText(value, x, y);
        // console.log(this);
        this.ctx.draw(true);
    }

    pressUpArea(obj) {
        let {value, section, x, y} = obj;
        let area = this.sectionArea.filter((area)=>area.section===section)[0];

        // this.ctx.clearRect(area.x, area.y, area.endX - area.x+1, area.endY - area.y+1);
        this.ctx.fillStyle = this.normalBgColor;
        this.fillRoundRect(area.x, area.y, area.endX - area.x, area.endY - area.y, this.radius);
        this.ctx.fillStyle = this.normalColor;
        this.ctx.fillText(value, x, y);
        // console.log(this);
        this.ctx.draw(true);
    }

    fillRoundRect(x, y, w, h, r) {
        this.ctx.beginPath();
        this.ctx.moveTo(x+r, y);
        this.ctx.arcTo(x+w, y, x+w, y+h, r);

        this.ctx.arcTo(x+w, y+h, x, y+h, r);

        this.ctx.arcTo(x, y+h, x, y, r);

        this.ctx.arcTo(x, y, x+w, y, r);
        this.ctx.closePath();
        this.ctx.fill();
    }
}

wxa.launchPage(NumberKeyboard);
</script>
<config>
{
}
</config>
<template>
    <view class="title">
        NumberKeyboard
    </view>
    <view>
        {{value}}
    </view>
    <canvas canvas-id="keyboard" class="keyboard" bindtouchstart="touchstart" bindtouchend="touchend" disable-scroll="true"></canvas>
</template>
<style lang="scss">
    view {
        box-sizing: border-box;
    }

    page {
        background: #f2f2f2;
    }

    .keyboard {
        width: 100%;
        height: 700rpx;
        position: absolute;
        // background-color:white;
        box-shadow: 0 -5rpx 5rpx rgba(#000000, .15);
        bottom: 0;
        left: 0;
    }
</style>
